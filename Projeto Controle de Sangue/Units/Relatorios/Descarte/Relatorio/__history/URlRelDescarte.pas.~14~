unit URlRelDescarte;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, RLReport, Datasnap.DBClient, Data.DB, UClassRelEntrada,
  UClassPersistencia, RLFilters, RLPDFFilter, UClassRelDescarte;

type
  TFrmRlRelDescarte = class(TForm)
    RLReport: TRLReport;
    RLBandHeader: TRLBand;
    RLLabel: TRLLabel;
    RLBandTitle: TRLBand;
    RLLabelDataEntrada: TRLLabel;
    RLPanel1: TRLPanel;
    RLLabelNumeroBolsa: TRLLabel;
    RLPanel2: TRLPanel;
    RLLabelOrigem: TRLLabel;
    RLPanel3: TRLPanel;
    RLLabelTipo: TRLLabel;
    RLPanel4: TRLPanel;
    RLLabelVolume: TRLLabel;
    RLPanel5: TRLPanel;
    RLLabelAboRh: TRLLabel;
    RLPanel6: TRLPanel;
    DataSource: TDataSource;
    RLBand1: TRLBand;
    RLDBTextDataEntrada: TRLDBText;
    RLDBTextNumeroBolsa: TRLDBText;
    RLDBTextOrigem: TRLDBText;
    RLDBTextTipo: TRLDBText;
    RLDBTextVolume: TRLDBText;
    RLDBTextAboRh: TRLDBText;
    RLPanel13: TRLPanel;
    RLPanel14: TRLPanel;
    RLPanel15: TRLPanel;
    RLPanel16: TRLPanel;
    RLPanel17: TRLPanel;
    RLPanel18: TRLPanel;
    RLBand2: TRLBand;
    RLLabelTotalEntradas: TRLLabel;
    RLDBResultTotalEntradas: TRLDBResult;
    RLPDFFilter: TRLPDFFilter;
    RLLabelResponsavel: TRLLabel;
    RLPanel7: TRLPanel;
    RLPanel8: TRLPanel;
    RLDBText1: TRLDBText;
    RLPanel9: TRLPanel;
    RLLabel1: TRLLabel;
    RLPanel10: TRLPanel;
    RLDBTextPai: TRLDBText;
    RLPanel11: TRLPanel;
    RLLabel2: TRLLabel;
    RLLabel3: TRLLabel;
    RLPanel19: TRLPanel;
    RLDBText2: TRLDBText;
    RLPanel12: TRLPanel;
    RLPanel20: TRLPanel;
    RLLabel4: TRLLabel;
    RLPanel21: TRLPanel;
    RLLabel5: TRLLabel;
    RLPanel22: TRLPanel;
    RLLabel6: TRLLabel;
    RLLabel7: TRLLabel;
    RLDBText3: TRLDBText;
    RLDBText4: TRLDBText;
    RLDBText5: TRLDBText;
    RLDBText6: TRLDBText;
    RLPanel23: TRLPanel;
    RLPanel24: TRLPanel;
    RLPanel25: TRLPanel;
    RLPanel26: TRLPanel;
    RLPanel27: TRLPanel;
    RLLabel8: TRLLabel;
    RLDBText7: TRLDBText;
    RLLabel9: TRLLabel;
    RLPanel28: TRLPanel;
    RLPanel29: TRLPanel;
    RLDBText8: TRLDBText;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure RLReportBeforePrint(Sender: TObject; var PrintIt: Boolean);
  private

    FForeignFormKey: SmallInt;
    FCodUsu: Integer;
    FRelDescarte: TRelDescarte;
    FPersistencia: TPersistencia;
    FClientDataSet: TClientDataSet;

    function PreparaRelatorio: Boolean;

  public
    class function getRlRelDescarte(const pFOREIGNFORMKEY: SmallInt; const pCOD_USU: Integer;
      const pRELDESCARTE: TRelDescarte): Boolean;
  end;

var
  FrmRlRelDescarte: TFrmRlRelDescarte;

implementation

uses UClassMensagem, UDMConexao, UClassRelEntradaDAO, UClassRelDescarteDAO;

{$R *.dfm}
{ TFrmRelEntrada }

procedure TFrmRlRelDescarte.FormClose(Sender: TObject; var Action: TCloseAction);
begin

  Self.FClientDataSet.Close;
  Self.FClientDataSet.Active := False;

  DataSource.DataSet := nil;

end;

procedure TFrmRlRelDescarte.FormCreate(Sender: TObject);
begin

  Self.FPersistencia := TPersistencia.Create(DataModuleConexao.Conexao);

  Self.FClientDataSet := TClientDataSet.Create(nil);
  Self.FClientDataSet.Aggregates.Clear;
  Self.FClientDataSet.Params.Clear;
  Self.FClientDataSet.AggregatesActive := False;
  Self.FClientDataSet.AutoCalcFields := True;
  Self.FClientDataSet.FetchOnDemand := True;
  Self.FClientDataSet.ObjectView := True;

end;

procedure TFrmRlRelDescarte.FormDestroy(Sender: TObject);
begin

  Self.FPersistencia.Destroy;
  Self.FClientDataSet.Destroy;

end;

class function TFrmRlRelDescarte.getRlRelDescarte(const pFOREIGNFORMKEY: SmallInt; const pCOD_USU: Integer;
  const pRELDESCARTE: TRelDescarte): Boolean;
begin

  Application.CreateForm(TFrmRlRelDescarte, FrmRlRelDescarte);
  try

    try

      FrmRlRelDescarte.FForeignFormKey := pFOREIGNFORMKEY;
      FrmRlRelDescarte.FCodUsu := pCOD_USU;
      FrmRlRelDescarte.FRelDescarte := pRELDESCARTE;

      Result := False;

      if (FrmRlRelDescarte.PreparaRelatorio) then
      begin

        if (pRELENTRADA.Visualizar) then
        begin

          Result := FrmRlRelDescarte.RLReport.PreviewModal;

        end
        else
        begin

          FrmRlRelDescarte.RLReport.Print;
          Result := True;

        end;

      end;

    except
      on E: Exception do
      begin
        Result := False;
        raise Exception.Create(Format(TMensagem.getMensagem(0), ['de relatório de entrada', E.Message]));
      end;
    end;

  finally
    FreeAndNil(FrmRlRelDescarte);
  end;

end;

function TFrmRlRelDescarte.PreparaRelatorio: Boolean;
var
  lRelDescarteDAO: TRelDescarteDAO;
begin

  lRelDescarteDAO := TRelDescarteDAO.Create(DataModuleConexao.Conexao);
  try

    try

      if (lRelDescarteDAO.getRelatorio(Self.FPersistencia, Self.FRelDescarte)) then
      begin

        Result := not Self.FPersistencia.Query.IsEmpty;

        if (Result) then
        begin

          // Usa o ClientDataSet pra não dar erro com o TSQLQuery qnd for gerar o relatório.
          DataSource.DataSet := Self.FPersistencia.Query;

        end
        else
        begin

          MessageBox(Self.Handle, 'Não há registros na sua busca', 'Aviso', mb_Ok);

        end;

      end;

    except
      on E: Exception do
      begin
        Result := False;
        raise Exception.Create(Format(TMensagem.getMensagem(1), ['entradas para gerar o relatório', E.Message]));
      end;
    end;

  finally
    lRelDescarteDAO.Destroy;
  end;

end;

procedure TFrmRlRelDescarte.RLReportBeforePrint(Sender: TObject; var PrintIt: Boolean);
begin

  SelectedFilter := RLPDFFilter;

end;

end.
